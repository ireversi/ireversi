/board:
  get:
    x-swagger-router-controller: test
    operationId: test_post
    security:
    - tokenAuth: []
    tags:
      - "board"
    summary: "show all board conditon. 全ての盤面情報"
    description: |
      - pieces
        - 盤面に置かれているコマの情報
      - candidates
        - 自コマが置けるセルの位置情報
      - standbys
        - 他コマが置かれる予定のセル情報
          - remaining
            - standbyの残り時間
          - piece
            - 置かれる予定の他コマの情報
      - score
        - 全フィールドにある自コマの合計
      - size
        - フィールド全体のうち、上下左右の終端の位置情報
    responses:
      200:
        description: "all condition of pieces on board."
        schema:
          type: "object"
          $ref: "#/definitions/Board"
      401:
        description: "Unauthorized"
/board/specified_size:
  get:
    x-swagger-router-controller: test
    operationId: test_post
    security:
    - tokenAuth: []
    tags:
      - "board"
    summary: "show specified board size"
    description: "指定した範囲内でのboard情報"
    parameters:
      - $ref: "#/definitions/Size/properties/left"
      - $ref: "#/definitions/Size/properties/right"
      - $ref: "#/definitions/Size/properties/bottom"
      - $ref: "#/definitions/Size/properties/top"
    responses:
      200:
        description: "pieces on specified board size"
        schema:
          $ref: "#/definitions/Board"
      401:
        description: "Unauthorized"
/piece:
  post:
    x-swagger-router-controller: test
    operationId: test_post
    security:
    - tokenAuth: []
    tags:
      - piece
    summary: "set a piece on board"
    description: |
      - status
        - コマが置けたかtrue, falaseで返す
      - 以下、boardと同じくすべての盤面情報を返す
    parameters:
      - $ref: "#/definitions/Piece/properties/x"
      - $ref: "#/definitions/Piece/properties/y"
    responses:
      200:
        description: "show specified board size"
        schema:
          type: "object"
          properties:
            status:
              $ref: "#/definitions/Status"
            piece:
              $ref: "#/definitions/Piece"
      401:
        description: "Unauthorized"
  delete:
    x-swagger-router-controller: test
    operationId: test_post
    security:
    - tokenAuth: []
    tags:
      - piece
    summary: "delete a piece or all pieces"
    parameters:
      # - name: "pieces"
      #   description: "Add items to be deleted"
      #   in: "body"
      #   schema:
      #     $ref: "#/definitions/Positions"
      - name: "keyword"
        in: "query"
        description: "Please enter keyword if you want to delete all pieces."
        required: false
        type: "string"
    responses:
      200:
        description: "return delete status and board condition"
        schema:
          type: "object"
          properties:
            status:
              $ref: "#/definitions/Status"
/first_piece/position:
  post:
    x-swagger-router-controller: test
    operationId: test_post
    security:
    - tokenAuth: []
    tags:
      - first_piece
    summary: "set the first piece"
    parameters:
      - $ref: "#/definitions/Piece/properties/x"
      - $ref: "#/definitions/Piece/properties/y"
      - $ref: "#/definitions/Piece/properties/userId"
    responses:
      200:
        description: "return a place being standby"
        schema:
          type: "object"
          properties:
            status:
              $ref: "#/definitions/Status"
            standby:
              $ref: "#/definitions/Standby"
      401:
        description: "Unauthorized"
  delete:
    x-swagger-router-controller: test
    operationId: test_post
    security:
    - tokenAuth: []
    tags:
      - first_piece
    summary: "cancel the first piece"
    parameters:
      - name: userId
        in: "query"
        description: "userId"
        type: number
        example: 1
        required: true
    responses:
      200:
        description: "return a standby condition"
        schema:
          type: "object"
          properties:
            status:
              $ref: "#/definitions/Status"
            standby:
              $ref: "#/definitions/Standby"
      401:
        description: "Unauthorized"
/first_piece/direction:
  post:
    x-swagger-router-controller: test
    operationId: test_post
    security:
    - tokenAuth: []
    tags:
      - first_piece
    summary: "direction from first piece"
    parameters:
    - in: "query"
      required: true
      name: "userId"
      description: "userId"
      type: "number"
      schema:
        $ref: "#/definitions/Piece/properties/userId"
    - in: "query"
      required: true
      name: "direction"
      type: "string"
      description: "type one of following direction"
      enum: ["n", "ne", "e", "se", "s", "sw", "w", "nw"]
    responses:
      200:
        description: "return board condition when first piece shoot"
        schema:
          type: "object"
          properties:
            status:
              $ref: "#/definitions/Status"
            piece:
              $ref: "#/definitions/Piece"
            direction:
              type: "string"
              example: "nw"
      401:
        description: "Unauthorized"
definitions:
  Standbys:
    type: array
    description: "pieces to be ready to put"
    items:
      $ref: "#/definitions/Standby"
  Standby:
    type: "object"
    description: "piece to be ready to put"
    properties:
      remaining:
        type: "number"
      piece:
        $ref: "#/definitions/Piece"
  Status:
    type: "boolean"
    description: "return success or fail of your order"
    example: true
  Board:
    type: "object"
    description: "show a condition of all pieces on board"
    properties:
      pieces:
        $ref: "#/definitions/Pieces"
      candidates:
        $ref: "#/definitions/Positions"
      standbys:
        $ref: "#/definitions/Standbys"
      score:
        type: number
        in: "formData"
      size:
        type: "object"
        properties:
          x_min:
            type: "number"
          x_max:
            type: "number"
          y_min:
            type: "number"
          y_max:
            type: "number"
  Pieces:
    type: array
    description: "pieces condition on board"
    items:
      $ref: "#/definitions/Piece"
  Piece:
    type: object
    description: "piece condition"
    properties:
      x:
        name: "x"
        type: number
        description: "x position"
        example: 1
        in: "formData"
        required: true
      y:
        name: "y"
        type: number
        description: "y position"
        example: 1
        in: "formData"
        required: true
      userId:
        name: userId
        in: "query"
        description: "userId"
        type: number
        example: 1
        required: true
  Positions:
    type: array
    description: "just show piece locations (not include userId information)"
    items:
      $ref: "#/definitions/Position"
  Position:
    type: "object"
    description: "just show piece location (not include userId information)"
    properties:
      x:
        name: "x"
        type: "number"
        example: 1
        in: "formData"
      y:
        name: "y"
        type: "number"
        example: 1
        in: "formData"
  Size:
    type: "object"
    description: "specify a board size to be show"
    properties:
      left:
        name: "x_min"
        in: "query"
        description: "Min of X axis (left)"
        required: true
        type: "number"
      right:
        name: "x_max"
        in: "query"
        description: "Max of X axis (right)"
        required: true
        type: "number"
      bottom:
        name: "y_min"
        in: "query"
        description: "Min of Y axis (bottom)"
        required: true
        type: "number"
      top:
        name: "y_max"
        in: "query"
        description: "Max of X axis (top)"
        required: true
        type: "number"
  userId:
    type: "string"
    description: "generate new userId"
    properties:
      userId:
        name: "userId"
        type: "string"
        description: "userId"
        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        in: "formData"
        required: true
  accessToken:
    type: "string"
    description: "post accessToken"
    properties:
      accessToken:
        name: "accessToken"
        type: "string"
        description: "post accessToken"
        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        in: "formData"
        required: true
/user_id_generate:
  post:
    tags:
      - "userId"
    summary: "generate new userId by JWT"
    description: "userIdの新規生成"
    parameters:
      - name: userName
        in: "formData"
        description: "input user name"
        type: string
        example: 'testname'
        required:
    responses:
      200:
        description: "return a new userId"
        schema:
          type: "object"
          properties:
            userId:
              $ref: "#/definitions/userId"
securityDefinitions:
  tokenAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"
/access_auth:
  post:
    x-swagger-router-controller: test
    operationId: test_post
    security:
    - tokenAuth: []
    tags:
    - accessAuth
    description: Post message to test
    responses:
      '200':
        description: Success
        schema:
          $ref: '#/definitions/SimpleResponse'
      default:
        description: Error
        schema:
          $ref: "#/definitions/ErrorResponse"
/topScore:
  get:
    x-swagger-router-controller: test
    operationId: test_post
    security:
    - tokenAuth: []
    tags:
    - score
    description: get top5 scores
    parameters:
      - name: number
        in: "query"
        description: "number"
        type: number
        example: 5
        required: true
    responses:
      '200':
        description: Success
        schema:
          $ref: '#/definitions/SimpleResponse'
      default:
        description: Error
        schema:
          $ref: "#/definitions/ErrorResponse"
